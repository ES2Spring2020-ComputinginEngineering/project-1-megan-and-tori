#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Mar 22 14:03:20 2020

@author: megan
"""

import numpy as np
import matplotlib.pyplot as plt
import numpy as np
import math
import scipy.signal as sig
import os
path = "/Users/megan/Documents/GitHub/project-1-megan-and-tori/Step 4"
os.chdir(path)




def update_system(theta,pos,vel,time1,time2):
    # position and velocity update below
    dt = time2-time1
    acc= 9.81/(.2731*math.sin(theta))
    posNext = pos+vel*dt
    velNext = vel+acc*dt
    return posNext,velNext

def print_system(time,pos,vel):
    print("TIME:     ", time)
    print("POSITION: ", pos)
    print("VELOCITY: ", vel, "\n")
    
def manipulate(length, acc):
    for i in acc:
        angular_acc.append(i/length)
 

def find_angle_from_horizontal(list):
    #due to our microbit orientation, the horizontal is dependent on y so all calculations will be based on y
    acc_x = float(list[1])
    acc_y = float(list[2])
    acc_z = float(list[3])
    top = acc_y 
    #the equation has the y acceleration on the top, and we are going to index a list with all the original values to find y accel
    #since the original list is [time, x accel, y accel, z accel], we index accordingly
    bottom = math.sqrt((acc_x)**2 +(acc_z)**2)
    tilt_angle = math.atan2(top, bottom)
    tiltY = (tilt_angle * 180) / math.pi
    theta.append(tiltY)
    #theta is initialized above the function call


fin = open('test data 4.csv',"r")
y_accel = []
timez = []
theta = []       
for ln in fin: #putting data into 4 lists
    temp1 = ln.strip()
    temp = temp1.split(',')
    timez.append(float(temp[0]))
    y_accel.append(float(temp[2]))
    find_angle_from_horizontal(temp) 
    

fin.close()


# initial conditions
pos = [0]
vel = [0]
angular_acc = []
manipulate(.2731, y_accel)


time= timez
acc = y_accel
print_system(time[0],pos[0],vel[0])


i = 1
while i < len(time):
    # update position and velocity using previous values and time step
    posNext, velNext = update_system(angular_acc[i],pos[i-1],vel[i-1],time[i-1],time[i])
    pos.append(posNext)
    vel.append(velNext)
    print_system(time[i],pos[i],vel[i])
    i += 1
    
    
    
    
    
    
    